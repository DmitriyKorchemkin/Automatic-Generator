% Pavel Trutman, pavel.trutman@fel.cvut.cz, April 2015
%
% Validation function used by benchmark utility.
% This function substitutes computed solution into polynomials generated 
% by solver. This should be zero value, but because of bad stability we 
% get non zero value.
%
% solution - computed solutions by solver
% benchData - data from benchmark, especially polynomials generated by
%   solver
% unknown - list of unknowns
% cfg - settings

function [err] = validateZeroPolynomials(~, ~, solution, benchData, unknown, cfg)
  
  maxOrder = size(benchData{1}.polynomials, 2);
  
  % generate used monomials
  monDegs = zeros(1, size(unknown, 2));
  deg = 0;
  while size(monDegs, 1) < maxOrder
    deg = deg + 1;
    [~, degs] = GenerateMonomials(deg, unknown, cfg.ordering);
    monDegs = [degs; monDegs];
  end
  
  err = ones(size(solution, 1), 0)*NaN;
  
  % for each inputData
  for i = 1:size(solution, 1)
    
    % for each solution
    for j = 1:size(solution{i}, 2);
      
      % prepare vector of unknowns
      unknownVec = ones(maxOrder, 1);
      for k = 1:maxOrder
        for l = 1:size(monDegs, 2)
          unknownVec(end - k + 1, 1) = unknownVec(end - k + 1, 1)*solution{i}(l, j)^monDegs(end - k + 1, l);
        end
      end
      
      % enlarge matrix if needed
      if j > size(err, 2)
        oldErr = err;
        err = ones(size(solution, 1), j)*NaN;
        err(:, 1:size(oldErr, 2)) = oldErr;
      end
      
      err(i, j) = sum(benchData{i}.polynomials*unknownVec);
      
    end
  end
  
end